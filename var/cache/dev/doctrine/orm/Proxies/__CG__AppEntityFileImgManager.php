<?php

namespace Proxies\__CG__\App\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class FileImgManager extends \App\Entity\FileImgManager implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'App\\Entity\\FileImgManager' . "\0" . 'id', '' . "\0" . 'App\\Entity\\FileImgManager' . "\0" . 'fileName', '' . "\0" . 'App\\Entity\\FileImgManager' . "\0" . 'fileSize', '' . "\0" . 'App\\Entity\\FileImgManager' . "\0" . 'fileMimeType', '' . "\0" . 'App\\Entity\\FileImgManager' . "\0" . 'fileOriginalName', '' . "\0" . 'App\\Entity\\FileImgManager' . "\0" . 'file', '' . "\0" . 'App\\Entity\\FileImgManager' . "\0" . 'updatedAt', '' . "\0" . 'App\\Entity\\FileImgManager' . "\0" . 'tmpFile', '' . "\0" . 'App\\Entity\\FileImgManager' . "\0" . 'fileType'];
        }

        return ['__isInitialized__', '' . "\0" . 'App\\Entity\\FileImgManager' . "\0" . 'id', '' . "\0" . 'App\\Entity\\FileImgManager' . "\0" . 'fileName', '' . "\0" . 'App\\Entity\\FileImgManager' . "\0" . 'fileSize', '' . "\0" . 'App\\Entity\\FileImgManager' . "\0" . 'fileMimeType', '' . "\0" . 'App\\Entity\\FileImgManager' . "\0" . 'fileOriginalName', '' . "\0" . 'App\\Entity\\FileImgManager' . "\0" . 'file', '' . "\0" . 'App\\Entity\\FileImgManager' . "\0" . 'updatedAt', '' . "\0" . 'App\\Entity\\FileImgManager' . "\0" . 'tmpFile', '' . "\0" . 'App\\Entity\\FileImgManager' . "\0" . 'fileType'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (FileImgManager $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function setFile(\Symfony\Component\HttpFoundation\File\File $file = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFile', [$file]);

        return parent::setFile($file);
    }

    /**
     * {@inheritDoc}
     */
    public function getFile()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFile', []);

        return parent::getFile();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedAt($updatedAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedAt', [$updatedAt]);

        return parent::setUpdatedAt($updatedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAt', []);

        return parent::getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setTmpFile($tmpFile)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTmpFile', [$tmpFile]);

        return parent::setTmpFile($tmpFile);
    }

    /**
     * {@inheritDoc}
     */
    public function getTmpFile()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTmpFile', []);

        return parent::getTmpFile();
    }

    /**
     * {@inheritDoc}
     */
    public function setFileName($fileName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFileName', [$fileName]);

        return parent::setFileName($fileName);
    }

    /**
     * {@inheritDoc}
     */
    public function getFileName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFileName', []);

        return parent::getFileName();
    }

    /**
     * {@inheritDoc}
     */
    public function setFileType($fileType)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFileType', [$fileType]);

        return parent::setFileType($fileType);
    }

    /**
     * {@inheritDoc}
     */
    public function getFileType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFileType', []);

        return parent::getFileType();
    }

    /**
     * {@inheritDoc}
     */
    public function setFileSize($fileSize)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFileSize', [$fileSize]);

        return parent::setFileSize($fileSize);
    }

    /**
     * {@inheritDoc}
     */
    public function getFileSize()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFileSize', []);

        return parent::getFileSize();
    }

    /**
     * {@inheritDoc}
     */
    public function setFileMimeType($fileMimeType)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFileMimeType', [$fileMimeType]);

        return parent::setFileMimeType($fileMimeType);
    }

    /**
     * {@inheritDoc}
     */
    public function getFileMimeType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFileMimeType', []);

        return parent::getFileMimeType();
    }

    /**
     * {@inheritDoc}
     */
    public function setFileOriginalName($fileOriginalName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFileOriginalName', [$fileOriginalName]);

        return parent::setFileOriginalName($fileOriginalName);
    }

    /**
     * {@inheritDoc}
     */
    public function getFileOriginalName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFileOriginalName', []);

        return parent::getFileOriginalName();
    }

}
